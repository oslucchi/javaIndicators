package javaIndicatorsTest.Trend;

import static org.junit.Assert.assertEquals;

import java.util.List;

import org.junit.Ignore;
import org.junit.Test;

import Tick.Tick;
import Tick.TickLogger;
import javaIndicators.Trend.Trend;
import utils.DataLoader;


public class testTrend {
	List<Tick> tickList;

	@Ignore
	@Test
	public void testAccumulationDistributionLine() 
	{
		double[] resultsADL = {
				-3187045.45454551,-8215409.09090924,-10577250.2673798,-7617386.63101627,-5037393.52756817,
				-9715226.86090153,-4405126.86090153,-11621583.271158,-9344508.27115778,-14839679.0028651,
				-16261491.5028651,-17282830.6332997,-16982648.2803585,-12530948.2803584,-14230919.7089298,
				-22819540.5880506,-24571296.5202541,-24082092.8165505,-23152938.9703965,-22615696.1132537,
				-23166137.0968602,-27029362.6782555,-26868299.0418919,-27535516.6889507,-22137100.4098809,
				-19819109.50079,-17386409.50079,-14150459.5007901,-14879175.2902637,-13177095.2902636,
				-12169823.8616922,-14073407.6454761,-16703471.6454762,-13232943.0740477,-18087756.7104112,
				-18225999.5675541,-19748548.7200964,-21395715.3867631,-19533782.0534298,-18997459.4727847,
				-26642051.3095194,-23306790.3339095,-25296274.9492941,-25155908.2826274,-23545617.3735366,
				-21164179.8735367,-22758668.7624256,-22215806.69346,-25285015.9957856,-24612481.5130271,
				-23499592.6241383,-23170369.0947264,-25178143.2882748,-21972879.1857104,-29266526.5541315,
				-26184246.5541314,-23311330.4250992,-28374330.4250992,-25417259.5160084,-20480131.8237007,
				-22339610.0845702,-20510537.3572976,-26028670.6906311,-25925063.2832237,-28880428.5006149,
				-31127302.1848255,-33731613.5055802,-30737215.2004954,-33566186.6290668,-39949486.6290668,
				-38919871.4775517,-37544862.3866425,-34443662.3866425,-32267758.0388164,-31448571.8319199,
				-32398467.8319199,-33251867.8319198,-30312549.3134013,-33689120.7419728,-35577291.8530839,
				-36445484.2581472,-34930115.8370947,-35130903.3370948,-32642478.3370948,-31248209.5870948,
				-29609512.8129013,-29463759.6214118,-36117508.8017397,-36314897.6906286,-38978084.7874027,
				-39178646.6921646,-39512903.5549097,-34070086.6318329,-31432878.4685676,-30735096.6503858,
				-32292886.1240701,-30800944.7447598,-32183467.8216829,-31891192.8216828,-34829490.1189801,
				-37037262.11898,-37949804.2242433,-38634645.6035536,-40954596.9549051,-39062942.4094505,
				-36473762.4094504,-35078021.2329798,-32903291.0004217,-32546741.0004216,-30300116.0004216,
				-30108504.8893105,-29725568.5256741,-32321312.525674,-30731585.2529467,-28748251.9196133,
				-25025251.9196133,-26787231.9196132,-28978067.2137309,-28103854.1702526,-33030539.8845383,
				-33256617.1572656,-31409902.2318925,-30454015.1351182,-30091431.8017849,-29025180.077647
		};
		
		tickList = DataLoader.populateTestData("docs/adlMarketData.ser");
		Trend trend = new Trend(14);
		Trend.AccumulationDistributionLine adl = trend.getAccumulationDistributionLine();
		
		TickLogger tl = TickLogger.getInstance();
		for(int i = 0; i < tickList.size(); i++)
		{
			tl.addTick(tickList.get(i));
			trend.addItem();
			assertEquals(resultsADL[i], adl.getValue(), 0.0000001);
			System.out.println(adl.getValue() + " ");
		}
	}

	@Test
	public void testAverageDirectionalIndex() 
	{
		double[] resultsADX = {
				0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
				0.0, 0.0, 0.0, 0.0, 0.0, 
				0.0, 0.0, 0.0, 3.4316843824391126, 7.088961860592204, 
				11.364312807212388, 15.834337671131198, 20.486769654396046, 24.690184777036706, 28.893599899677366, 
				32.34009101683849, 35.78658213399962, 39.555530506782745, 43.405500715612696, 47.54175177490199, 
				51.84537618605898, 56.651641886270355, 57.26837263739966, 57.2625192978175, 56.615080220830635, 
				55.849589627194554, 55.24921275258729, 53.75450746483738, 51.57405792087074, 49.88762475157234, 
				48.15908245009518, 46.408273129812905, 43.18706088910038, 39.444506399161746, 36.34913449360371, 
				33.433741680341534, 31.276199433722308, 30.367679695834177, 28.87059576633415, 28.041685964719644, 
				26.551161515823278, 25.936197966259584, 25.65284496637255, 25.899884131369618, 26.18903242854545, 
				26.413529647180148, 27.470251320850284, 27.102267768826238, 25.9197282805539, 24.323491506729862, 
				22.987812226324913, 20.580761710198107, 19.80831165924788, 18.63950526169785, 16.751383200690004, 
				14.918441479266727, 13.809742886885152, 13.097644516029302, 12.602008178714017, 12.399679779605716, 
				11.77039552117659, 12.800877887208419, 12.895246985152488, 12.720692987298007, 13.145365947798448, 
				13.789378630287148, 14.16859159860665, 14.552489842489829, 15.673304081161712, 16.536410800178775, 
				17.029408096694198, 16.013351709007605, 15.348244941457649, 14.154291077424956, 13.426231794537356, 
				12.569474354046745, 12.806962232247415, 13.044450110448086, 12.614619042150379, 12.992624589167212, 
				12.612905845726166, 12.180458962732034, 12.236331907004693, 12.41841327264646, 12.252882548430351, 
				12.564296695220845, 12.600118483594809, 12.635940271968773, 13.293568956177207, 13.525078506076577, 
				13.707282245799034, 13.88948598552149, 13.42886945062003, 12.423161904805982, 13.009130958839105, 
				13.200773171090944, 14.914037793599558, 17.820747042806577, 20.823744210163323, 24.343156089400733, 
				26.436924220935826, 28.798189785049853, 31.371221922556916, 33.62258210372011, 36.28395198027054, 
				40.229991325171206, 44.62638543942016, 47.57483263936944, 48.93160323947155, 50.05444902105031, 
				49.631020048427324, 49.09608479299078, 48.81247370926239, 47.972157494925604, 48.443508652861006, 
				47.64639246368505, 46.79977177536405, 46.99225401224466, 46.19170069781851, 42.8572383111939, 
				39.27836274414801, 36.86648276825575, 34.820320317555634, 32.416403690817056, 29.6346268678141, 
				26.315014834061593, 22.995402800309083, 20.647156312297515, 18.465499077352565, 17.065119061985744, 
				15.55671381039029, 13.885694881849174, 12.074404064376655, 11.892998594016236, 12.28993060407083, 
				12.705068332869521, 12.451144289194888, 14.384710247570672, 17.376879050086036, 20.533009182888172, 
				22.875992358287455, 23.971690787455106, 25.37294612087685, 26.993894149252892, 29.101762669318582, 
				29.849665156857558, 31.50692343865814, 32.74622448249432
		};
		
		int[] resultsSynteticIndicator = {
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
				1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2, 
				-1, -1, -1, -1, -1, -1, -1, -1, 2, 1, 1, 1, 1, -2, -1, 2, -1, 
				-1, -1, -1, -1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
				1, 1, -2, -1, -1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
				-2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
				-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
				-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
				-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
		};
		
		tickList = DataLoader.populateTestData("docs/adxMarketData.ser");
		Trend trend = new Trend(14);
		Trend.AverageDirectionalIndex adx = trend.getAverageDirectionalIndex();
		
		TickLogger tl = TickLogger.getInstance();
		tl.addTick(tickList.get(0));
		for(int i = 1; i < tickList.size(); i++)
		{
			tl.addTick(tickList.get(i));
			trend.addItem();
			assertEquals(resultsADX[i], adx.getValue(), 0.0000001);
			assertEquals(resultsSynteticIndicator[i], adx.getSytnteticIndicator());
//			System.out.println(adx.getValue() + " ");
		}
	}

}
